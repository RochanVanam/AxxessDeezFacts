{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/rochanvanam/Documents/python_projects/AxxessDeezFacts/frontend/src/components/DemoBadge.tsx"],"sourcesContent":["export const DemoBadge = () => (\n  <div className=\"fixed bottom-0 right-20 z-10\">\n    <a\n      href=\"https://github.com/ixartz/Next-js-Boilerplate\"\n    >\n      <div className=\"rounded-md bg-gray-900 px-3 py-2 font-semibold text-gray-100\">\n        <span className=\"text-gray-500\">Demo of</span>\n        {` Next.js Boilerplate`}\n      </div>\n    </a>\n  </div>\n);\n"],"names":[],"mappings":";;;;;AAAO,MAAM,YAAY,kBACvB,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,MAAK;sBAEL,cAAA,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAK,WAAU;kCAAgB;;;;;;oBAC/B,CAAC,oBAAoB,CAAC"}},
    {"offset": {"line": 44, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":["file:///Users/rochanvanam/Documents/python_projects/AxxessDeezFacts/frontend/src/libs/Env.ts"],"sourcesContent":["import { createEnv } from '@t3-oss/env-nextjs';\nimport { z } from 'zod';\n\nexport const Env = createEnv({\n  server: {\n    ARCJET_KEY: z.string().startsWith('ajkey_').optional(),\n    CLERK_SECRET_KEY: z.string().min(1),\n    DATABASE_URL: z.string().optional(),\n    LOGTAIL_SOURCE_TOKEN: z.string().optional(),\n  },\n  client: {\n    NEXT_PUBLIC_APP_URL: z.string().optional(),\n    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1),\n    NEXT_PUBLIC_CLERK_SIGN_IN_URL: z.string().min(1),\n  },\n  shared: {\n    NODE_ENV: z.enum(['test', 'development', 'production']).optional(),\n  },\n  // You need to destructure all the keys manually\n  runtimeEnv: {\n    ARCJET_KEY: process.env.ARCJET_KEY,\n    CLERK_SECRET_KEY: process.env.CLERK_SECRET_KEY,\n    DATABASE_URL: process.env.DATABASE_URL,\n    LOGTAIL_SOURCE_TOKEN: process.env.LOGTAIL_SOURCE_TOKEN,\n    NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:\n      process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,\n    NEXT_PUBLIC_CLERK_SIGN_IN_URL: process.env.NEXT_PUBLIC_CLERK_SIGN_IN_URL,\n    NODE_ENV: process.env.NODE_ENV,\n  },\n});\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD,EAAE;IAC3B,QAAQ;QACN,YAAY,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,UAAU,CAAC,UAAU,QAAQ;QACpD,kBAAkB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACjC,cAAc,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;QACjC,sBAAsB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC3C;IACA,QAAQ;QACN,qBAAqB,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;QACxC,mCAAmC,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAClD,+BAA+B,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAChD;IACA,QAAQ;QACN,UAAU,oIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAQ;YAAe;SAAa,EAAE,QAAQ;IAClE;IACA,gDAAgD;IAChD,YAAY;QACV,YAAY,QAAQ,GAAG,CAAC,UAAU;QAClC,kBAAkB,QAAQ,GAAG,CAAC,gBAAgB;QAC9C,cAAc,QAAQ,GAAG,CAAC,YAAY;QACtC,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB;QACtD,qBAAqB,QAAQ,GAAG,CAAC,mBAAmB;QACpD,iCAAiC;QAEjC,6BAA6B;QAC7B,QAAQ;IACV;AACF"}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 350, "column": 0}, "map": {"version":3,"sources":["file:///Users/rochanvanam/Documents/python_projects/AxxessDeezFacts/frontend/src/libs/Logger.ts"],"sourcesContent":["import type { DestinationStream } from 'pino';\nimport logtail from '@logtail/pino';\nimport pino from 'pino';\nimport pretty from 'pino-pretty';\nimport { Env } from './Env';\n\nlet stream: DestinationStream;\n\nif (Env.LOGTAIL_SOURCE_TOKEN) {\n  stream = pino.multistream([\n    await logtail({\n      sourceToken: Env.LOGTAIL_SOURCE_TOKEN,\n      options: {\n        sendLogsToBetterStack: true,\n      },\n    }),\n    {\n      stream: pretty(), // Prints logs to the console\n    },\n  ]);\n} else {\n  stream = pretty({\n    colorize: true,\n  });\n}\n\nexport const logger = pino({ base: undefined }, stream);\n"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;AAEA,IAAI;AAEJ,IAAI,kHAAA,CAAA,MAAG,CAAC,oBAAoB,EAAE;IAC5B,SAAS,4HAAA,CAAA,UAAI,CAAC,WAAW,CAAC;QACxB,MAAM,CAAA,GAAA,yJAAA,CAAA,UAAO,AAAD,EAAE;YACZ,aAAa,kHAAA,CAAA,MAAG,CAAC,oBAAoB;YACrC,SAAS;gBACP,uBAAuB;YACzB;QACF;QACA;YACE,QAAQ,CAAA,GAAA,uIAAA,CAAA,UAAM,AAAD;QACf;KACD;AACH,OAAO;IACL,SAAS,CAAA,GAAA,uIAAA,CAAA,UAAM,AAAD,EAAE;QACd,UAAU;IACZ;AACF;AAEO,MAAM,SAAS,CAAA,GAAA,4HAAA,CAAA,UAAI,AAAD,EAAE;IAAE,MAAM;AAAU,GAAG"}},
    {"offset": {"line": 382, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 389, "column": 0}, "map": {"version":3,"sources":["file:///Users/rochanvanam/Documents/python_projects/AxxessDeezFacts/frontend/src/libs/Arcjet.ts"],"sourcesContent":["import arcjet, { shield } from '@arcjet/next';\nimport { Env } from './Env';\nimport { logger } from './Logger';\n\n// Re-export the rules to simplify imports inside handlers\nexport {\n  detectBot,\n  fixedWindow,\n  protectSignup,\n  request,\n  sensitiveInfo,\n  shield,\n  slidingWindow,\n} from '@arcjet/next';\n\n// Create a base Arcjet instance which can be imported and extended in each route.\nexport default arcjet({\n  // Get your site key from https://launch.arcjet.com/Q6eLbRE\n  key: Env.ARCJET_KEY!,\n  // Identify the user by their IP address\n  characteristics: ['ip.src'],\n  rules: [\n    // Protect against common attacks with Arcjet Shield\n    shield({\n      mode: 'LIVE', // will block requests. Use \"DRY_RUN\" to log only\n    }),\n    // Other rules are added in different routes\n  ],\n  log: logger,\n});\n"],"names":[],"mappings":";;;AAAA;AACA;AADA;AAEA;;;;;;;;;uCAce,CAAA,GAAA,yJAAA,CAAA,UAAM,AAAD,EAAE;IACpB,2DAA2D;IAC3D,KAAK,kHAAA,CAAA,MAAG,CAAC,UAAU;IACnB,wCAAwC;IACxC,iBAAiB;QAAC;KAAS;IAC3B,OAAO;QACL,oDAAoD;QACpD,CAAA,GAAA,+IAAA,CAAA,SAAM,AAAD,EAAE;YACL,MAAM;QACR;KAED;IACD,KAAK,qHAAA,CAAA,SAAM;AACb"}},
    {"offset": {"line": 419, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 443, "column": 0}, "map": {"version":3,"sources":["file:///Users/rochanvanam/Documents/python_projects/AxxessDeezFacts/frontend/src/utils/AppConfig.ts"],"sourcesContent":["import type { LocalePrefixMode } from 'node_modules/next-intl/dist/types/src/routing/types';\n\nconst localePrefix: LocalePrefixMode = 'as-needed';\n\n// FIXME: Update this configuration file based on your project information\nexport const AppConfig = {\n  name: 'Ultrasound Detector',\n  locales: ['en', 'fr'],\n  defaultLocale: 'en',\n  localePrefix,\n};\n"],"names":[],"mappings":";;;AAEA,MAAM,eAAiC;AAGhC,MAAM,YAAY;IACvB,MAAM;IACN,SAAS;QAAC;QAAM;KAAK;IACrB,eAAe;IACf;AACF"}},
    {"offset": {"line": 456, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 462, "column": 0}, "map": {"version":3,"sources":["file:///Users/rochanvanam/Documents/python_projects/AxxessDeezFacts/frontend/src/libs/i18n.ts"],"sourcesContent":["import { getRequestConfig } from 'next-intl/server';\nimport { routing } from './i18nNavigation';\n\n// NextJS Boilerplate uses Crowdin as the localization software.\n// As a developer, you only need to take care of the English (or another default language) version.\n// Other languages are automatically generated and handled by Crowdin.\n\n// The localisation files are synced with Crowdin using GitHub Actions.\n// By default, there are 3 ways to sync the message files:\n// 1. Automatically sync on push to the `main` branch\n// 2. Run manually the workflow on GitHub Actions\n// 3. Every 24 hours at 5am, the workflow will run automatically\n\n// Using internationalization in Server Components\nexport default getRequestConfig(async ({ requestLocale }) => {\n  // This typically corresponds to the `[locale]` segment\n  let locale = await requestLocale;\n\n  // Validate that the incoming `locale` parameter is valid\n  if (!locale || !routing.locales.includes(locale)) {\n    locale = routing.defaultLocale;\n  }\n\n  return {\n    locale,\n    messages: (await import(`../locales/${locale}.json`)).default,\n  };\n});\n"],"names":[],"mappings":";;;AACA;AADA;;;uCAce,CAAA,GAAA,2OAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAE,aAAa,EAAE;IACtD,uDAAuD;IACvD,IAAI,SAAS,MAAM;IAEnB,yDAAyD;IACzD,IAAI,CAAC,UAAU,CAAC,6HAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS;QAChD,SAAS,6HAAA,CAAA,UAAO,CAAC,aAAa;IAChC;IAEA,OAAO;QACL;QACA,UAAU,CAAC;;;;;;;;;kBAAa,CAAC,WAAW,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO;IAC/D;AACF"}},
    {"offset": {"line": 490, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 496, "column": 0}, "map": {"version":3,"sources":["file:///Users/rochanvanam/Documents/python_projects/AxxessDeezFacts/frontend/src/libs/i18nNavigation.ts"],"sourcesContent":["import { AppConfig } from '@/utils/AppConfig';\nimport { createNavigation } from 'next-intl/navigation';\nimport { defineRouting } from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  locales: AppConfig.locales,\n  localePrefix: AppConfig.localePrefix,\n  defaultLocale: AppConfig.defaultLocale,\n});\n\nexport const { usePathname, useRouter } = createNavigation(routing);\n"],"names":[],"mappings":";;;;;AAAA;AAEA;AADA;;;;AAGO,MAAM,UAAU,CAAA,GAAA,+IAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,SAAS,yHAAA,CAAA,YAAS,CAAC,OAAO;IAC1B,cAAc,yHAAA,CAAA,YAAS,CAAC,YAAY;IACpC,eAAe,yHAAA,CAAA,YAAS,CAAC,aAAa;AACxC;AAEO,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,+OAAA,CAAA,mBAAgB,AAAD,EAAE"}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 519, "column": 0}, "map": {"version":3,"sources":["file:///Users/rochanvanam/Documents/python_projects/AxxessDeezFacts/frontend/src/app/%5Blocale%5D/layout.tsx"],"sourcesContent":["import type { Metadata } from 'next';\nimport { DemoBadge } from '@/components/DemoBadge';\nimport arcjet, { detectBot, request } from '@/libs/Arcjet';\nimport { Env } from '@/libs/Env';\nimport { routing } from '@/libs/i18nNavigation';\nimport { NextIntlClientProvider } from 'next-intl';\nimport { getMessages, setRequestLocale } from 'next-intl/server';\nimport { notFound } from 'next/navigation';\nimport '@/styles/global.css';\n\nexport const metadata: Metadata = {\n  icons: [\n    {\n      rel: 'apple-touch-icon',\n      url: '/apple-touch-icon.png',\n    },\n    {\n      rel: 'icon',\n      type: 'image/png',\n      sizes: '32x32',\n      url: '/favicon-32x32.png',\n    },\n    {\n      rel: 'icon',\n      type: 'image/png',\n      sizes: '16x16',\n      url: '/favicon-16x16.png',\n    },\n    {\n      rel: 'icon',\n      url: '/favicon.ico',\n    },\n  ],\n};\n\nexport function generateStaticParams() {\n  return routing.locales.map(locale => ({ locale }));\n}\n\n// Improve security with Arcjet\nconst aj = arcjet.withRule(\n  detectBot({\n    mode: 'LIVE',\n    // Block all bots except the following\n    allow: [\n      // See https://docs.arcjet.com/bot-protection/identifying-bots\n      'CATEGORY:SEARCH_ENGINE', // Allow search engines\n      'CATEGORY:PREVIEW', // Allow preview links to show OG images\n      'CATEGORY:MONITOR', // Allow uptime monitoring services\n    ],\n  }),\n);\n\nexport default async function RootLayout(props: {\n  children: React.ReactNode;\n  params: Promise<{ locale: string }>;\n}) {\n  const { locale } = await props.params;\n\n  if (!routing.locales.includes(locale)) {\n    notFound();\n  }\n\n  setRequestLocale(locale);\n\n  // Verify the request with Arcjet\n  if (Env.ARCJET_KEY) {\n    const req = await request();\n    const decision = await aj.protect(req);\n\n    // These errors are handled by the global error boundary, but you could also\n    // redirect or show a custom error page\n    if (decision.isDenied()) {\n      if (decision.reason.isBot()) {\n        throw new Error('No bots allowed');\n      }\n\n      throw new Error('Access denied');\n    }\n  }\n\n  // Using internationalization in Client Components\n  const messages = await getMessages();\n\n  // The `suppressHydrationWarning` attribute in <body> is used to prevent hydration errors caused by Sentry Overlay,\n  // which dynamically adds a `style` attribute to the body tag.\n\n  return (\n    <html lang={locale}>\n      <body suppressHydrationWarning>\n        <NextIntlClientProvider\n          locale={locale}\n          messages={messages}\n        >\n          {props.children}\n\n          <DemoBadge />\n        </NextIntlClientProvider>\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;;;AACA;AACA;AACA;AACA;AAGA;AALA;AAAA;AAKA;AADA;AAJA;AAIA;AADA;;;;;;;;;;;;;;;AAKO,MAAM,WAAqB;IAChC,OAAO;QACL;YACE,KAAK;YACL,KAAK;QACP;QACA;YACE,KAAK;YACL,MAAM;YACN,OAAO;YACP,KAAK;QACP;QACA;YACE,KAAK;YACL,MAAM;YACN,OAAO;YACP,KAAK;QACP;QACA;YACE,KAAK;YACL,KAAK;QACP;KACD;AACH;AAEO,SAAS;IACd,OAAO,6HAAA,CAAA,UAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAA,SAAU,CAAC;YAAE;QAAO,CAAC;AAClD;AAEA,+BAA+B;AAC/B,MAAM,KAAK,qIAAA,CAAA,UAAM,CAAC,QAAQ,CACxB,CAAA,GAAA,+IAAA,CAAA,YAAS,AAAD,EAAE;IACR,MAAM;IACN,sCAAsC;IACtC,OAAO;QACL,8DAA8D;QAC9D;QACA;QACA;KACD;AACH;AAGa,eAAe,WAAW,KAGxC;IACC,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,MAAM,MAAM;IAErC,IAAI,CAAC,6HAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS;QACrC,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IACT;IAEA,CAAA,GAAA,4PAAA,CAAA,mBAAgB,AAAD,EAAE;IAEjB,iCAAiC;IACjC,IAAI,kHAAA,CAAA,MAAG,CAAC,UAAU,EAAE;QAClB,MAAM,MAAM,MAAM,CAAA,GAAA,yJAAA,CAAA,UAAO,AAAD;QACxB,MAAM,WAAW,MAAM,GAAG,OAAO,CAAC;QAElC,4EAA4E;QAC5E,uCAAuC;QACvC,IAAI,SAAS,QAAQ,IAAI;YACvB,IAAI,SAAS,MAAM,CAAC,KAAK,IAAI;gBAC3B,MAAM,IAAI,MAAM;YAClB;YAEA,MAAM,IAAI,MAAM;QAClB;IACF;IAEA,kDAAkD;IAClD,MAAM,WAAW,MAAM,CAAA,GAAA,iOAAA,CAAA,cAAW,AAAD;IAEjC,mHAAmH;IACnH,8DAA8D;IAE9D,qBACE,8OAAC;QAAK,MAAM;kBACV,cAAA,8OAAC;YAAK,wBAAwB;sBAC5B,cAAA,8OAAC,mPAAA,CAAA,yBAAsB;gBACrB,QAAQ;gBACR,UAAU;;oBAET,MAAM,QAAQ;kCAEf,8OAAC,+HAAA,CAAA,YAAS;;;;;;;;;;;;;;;;;;;;;AAKpB"}},
    {"offset": {"line": 645, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}