{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/instrumentation.ts"],"sourcesContent":["import * as Sentry from '@sentry/nextjs';\n\nexport const onRequestError = Sentry.captureRequestError;\n\nexport async function register() {\n  if (process.env.NEXT_RUNTIME === 'nodejs') {\n    // Node.js Sentry configuration\n    Sentry.init({\n      // Sentry DSN\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n\n      // Enable Spotlight in development\n      spotlight: process.env.NODE_ENV === 'development',\n\n      // Adjust this value in production, or use tracesSampler for greater control\n      tracesSampleRate: 1,\n\n      // Setting this option to true will print useful information to the console while you're setting up Sentry.\n      debug: false,\n    });\n  }\n\n  if (process.env.NEXT_RUNTIME === 'edge') {\n    // Edge Sentry configuration\n    Sentry.init({\n      // Sentry DSN\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n\n      // Enable Spotlight in development\n      spotlight: process.env.NODE_ENV === 'development',\n\n      // Adjust this value in production, or use tracesSampler for greater control\n      tracesSampleRate: 1,\n\n      // Setting this option to true will print useful information to the console while you're setting up Sentry.\n      debug: false,\n    });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,iBAAiB,yKAAO,mBAAmB;AAEjD,eAAe;IACpB,uCAA2C;;IAe3C;IAEA,wCAAyC;QACvC,4BAA4B;QAC5B,yKAAO,IAAI,CAAC;YACV,aAAa;YACb,KAAK,QAAQ,GAAG,CAAC,sBAAsB;YAEvC,kCAAkC;YAClC,WAAW,oDAAyB;YAEpC,4EAA4E;YAC5E,kBAAkB;YAElB,2GAA2G;YAC3G,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/edge-wrapper.js"],"sourcesContent":["self._ENTRIES ||= {};\nconst modProm = import('MODULE');\nmodProm.catch(() => {});\nself._ENTRIES[\"middleware_instrumentation\"] = new Proxy(modProm, {\n    get(modProm, name) {\n        if (name === \"then\") {\n            return (res, rej) => modProm.then(res, rej);\n        }\n        let result = (...args) => modProm.then((mod) => (0, mod[name])(...args));\n        result.then = (res, rej) => modProm.then((mod) => mod[name]).then(res, rej);\n        return result;\n    },\n});\n"],"names":[],"mappings":"AAAA,KAAK,QAAQ,KAAK,CAAC;AACnB,MAAM;AACN,QAAQ,KAAK,CAAC,KAAO;AACrB,KAAK,QAAQ,CAAC,6BAA6B,GAAG,IAAI,MAAM,SAAS;IAC7D,KAAI,OAAO,EAAE,IAAI;QACb,IAAI,SAAS,QAAQ;YACjB,OAAO,CAAC,KAAK,MAAQ,QAAQ,IAAI,CAAC,KAAK;QAC3C;QACA,IAAI,SAAS,CAAC,GAAG,OAAS,QAAQ,IAAI,CAAC,CAAC,MAAQ,CAAC,GAAG,GAAG,CAAC,KAAK,KAAK;QAClE,OAAO,IAAI,GAAG,CAAC,KAAK,MAAQ,QAAQ,IAAI,CAAC,CAAC,MAAQ,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK;QACvE,OAAO;IACX;AACJ"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}