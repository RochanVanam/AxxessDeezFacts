{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/utils/AppConfig.ts"],"sourcesContent":["import type { LocalePrefixMode } from 'node_modules/next-intl/dist/types/src/routing/types';\n\nconst localePrefix: LocalePrefixMode = 'as-needed';\n\n// FIXME: Update this configuration file based on your project information\nexport const AppConfig = {\n  name: 'Ultrasound Detector',\n  locales: ['en', 'fr'],\n  defaultLocale: 'en',\n  localePrefix,\n};\n"],"names":[],"mappings":";;;AAEA,MAAM,eAAiC;AAGhC,MAAM,YAAY;IACvB,MAAM;IACN,SAAS;QAAC;QAAM;KAAK;IACrB,eAAe;IACf;AACF"}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/libs/i18n.ts"],"sourcesContent":["import { getRequestConfig } from 'next-intl/server';\nimport { routing } from './i18nNavigation';\n\n// NextJS Boilerplate uses Crowdin as the localization software.\n// As a developer, you only need to take care of the English (or another default language) version.\n// Other languages are automatically generated and handled by Crowdin.\n\n// The localisation files are synced with Crowdin using GitHub Actions.\n// By default, there are 3 ways to sync the message files:\n// 1. Automatically sync on push to the `main` branch\n// 2. Run manually the workflow on GitHub Actions\n// 3. Every 24 hours at 5am, the workflow will run automatically\n\n// Using internationalization in Server Components\nexport default getRequestConfig(async ({ requestLocale }) => {\n  // This typically corresponds to the `[locale]` segment\n  let locale = await requestLocale;\n\n  // Validate that the incoming `locale` parameter is valid\n  if (!locale || !routing.locales.includes(locale)) {\n    locale = routing.defaultLocale;\n  }\n\n  return {\n    locale,\n    messages: (await import(`../locales/${locale}.json`)).default,\n  };\n});\n"],"names":[],"mappings":";;;AACA;AADA;;;uCAce,CAAA,GAAA,2OAAA,CAAA,mBAAgB,AAAD,EAAE,OAAO,EAAE,aAAa,EAAE;IACtD,uDAAuD;IACvD,IAAI,SAAS,MAAM;IAEnB,yDAAyD;IACzD,IAAI,CAAC,UAAU,CAAC,6HAAA,CAAA,UAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS;QAChD,SAAS,6HAAA,CAAA,UAAO,CAAC,aAAa;IAChC;IAEA,OAAO;QACL;QACA,UAAU,CAAC;;;;;;;;;kBAAa,CAAC,WAAW,EAAE,OAAO,KAAK,CAAC,CAAC,EAAE,OAAO;IAC/D;AACF"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/libs/i18nNavigation.ts"],"sourcesContent":["import { AppConfig } from '@/utils/AppConfig';\nimport { createNavigation } from 'next-intl/navigation';\nimport { defineRouting } from 'next-intl/routing';\n\nexport const routing = defineRouting({\n  locales: AppConfig.locales,\n  localePrefix: AppConfig.localePrefix,\n  defaultLocale: AppConfig.defaultLocale,\n});\n\nexport const { usePathname, useRouter } = createNavigation(routing);\n"],"names":[],"mappings":";;;;;AAAA;AAEA;AADA;;;;AAGO,MAAM,UAAU,CAAA,GAAA,+IAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,SAAS,yHAAA,CAAA,YAAS,CAAC,OAAO;IAC1B,cAAc,yHAAA,CAAA,YAAS,CAAC,YAAY;IACpC,eAAe,yHAAA,CAAA,YAAS,CAAC,aAAa;AACxC;AAEO,MAAM,EAAE,WAAW,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,+OAAA,CAAA,mBAAgB,AAAD,EAAE"}},
    {"offset": {"line": 103, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import type { NextFetchEvent, NextRequest } from 'next/server';\nimport { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';\nimport createMiddleware from 'next-intl/middleware';\nimport { routing } from './libs/i18nNavigation';\n\nconst intlMiddleware = createMiddleware(routing);\n\nconst isProtectedRoute = createRouteMatcher([\n  '/dashboard(.*)',\n  '/:locale/dashboard(.*)',\n]);\n\nconst isAuthPage = createRouteMatcher([\n  '/sign-in(.*)',\n  '/:locale/sign-in(.*)',\n  '/sign-up(.*)',\n  '/:locale/sign-up(.*)',\n]);\n\nexport default function middleware(\n  request: NextRequest,\n  event: NextFetchEvent,\n) {\n  // Run Clerk middleware only when it's necessary\n  if (\n    isAuthPage(request) || isProtectedRoute(request)\n  ) {\n    return clerkMiddleware(async (auth, req) => {\n      if (isProtectedRoute(req)) {\n        const locale\n          = req.nextUrl.pathname.match(/(\\/.*)\\/dashboard/)?.at(1) ?? '';\n\n        const signInUrl = new URL(`${locale}/sign-in`, req.url);\n\n        await auth.protect({\n          // `unauthenticatedUrl` is needed to avoid error: \"Unable to find `next-intl` locale because the middleware didn't run on this request\"\n          unauthenticatedUrl: signInUrl.toString(),\n        });\n      }\n\n      return intlMiddleware(req);\n    })(request, event);\n  }\n\n  return intlMiddleware(request);\n}\n\nexport const config = {\n  matcher: [\n    // Skip Next.js internals and all static files, unless found in search params\n    '/((?!_next|monitoring|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',\n    // Always run for API routes\n    '/(api|trpc)(.*)',\n  ],\n};\n"],"names":[],"mappings":";;;;AAGA;AADA;AADA;AAAA;;;;AAIA,MAAM,iBAAiB,CAAA,GAAA,kJAAA,CAAA,UAAgB,AAAD,EAAE,6HAAA,CAAA,UAAO;AAE/C,MAAM,mBAAmB,CAAA,GAAA,0KAAA,CAAA,qBAAkB,AAAD,EAAE;IAC1C;IACA;CACD;AAED,MAAM,aAAa,CAAA,GAAA,0KAAA,CAAA,qBAAkB,AAAD,EAAE;IACpC;IACA;IACA;IACA;CACD;AAEc,SAAS,WACtB,OAAoB,EACpB,KAAqB;IAErB,gDAAgD;IAChD,IACE,WAAW,YAAY,iBAAiB,UACxC;QACA,OAAO,CAAA,GAAA,6KAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,MAAM;YAClC,IAAI,iBAAiB,MAAM;gBACzB,MAAM,SACF,IAAI,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,sBAAsB,GAAG,MAAM;gBAE9D,MAAM,YAAY,IAAI,IAAI,GAAG,OAAO,QAAQ,CAAC,EAAE,IAAI,GAAG;gBAEtD,MAAM,KAAK,OAAO,CAAC;oBACjB,uIAAuI;oBACvI,oBAAoB,UAAU,QAAQ;gBACxC;YACF;YAEA,OAAO,eAAe;QACxB,GAAG,SAAS;IACd;IAEA,OAAO,eAAe;AACxB;AAEO,MAAM,SAAS;IACpB,SAAS;QACP,6EAA6E;QAC7E;QACA,4BAA4B;QAC5B;KACD;AACH"}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}