//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  organizationRoles OrganizationRole[]
  pwaSubscriptions  PwaSubscription[]  @relation("user")
  healthLogs        HealthLog[]        @relation("user")
}

/// @@allow('all', true)
model Patient {
  id             String         @id() @default(uuid())
  firstName      String
  lastName       String
  dateOfBirth    String
  gender         String
  phone          String?
  email          String?
  address        String?
  organizationId String
  organization   Organization?  @relation(fields: [organizationId], references: [id], name: "organization")
  prescriptions  Prescription[] @relation("patient")
  healthLogs     HealthLog[]    @relation("patient")
  height         String
  weight         String
  conditions     String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Medication {
  id                  String            @id() @default(uuid())
  name                String
  description         String?
  currentStock        Float
  reorderThreshold    Float
  recommendedQuantity Float
  organizationId      String
  organization        Organization?     @relation(fields: [organizationId], references: [id], name: "organization")
  prescriptions       Prescription[]    @relation("medication")
  medicationOrders    MedicationOrder[] @relation("medication")
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Prescription {
  id           String      @id() @default(uuid())
  dosage       String
  frequency    String
  startDate    String
  endDate      String?
  status       String
  patientId    String
  patient      Patient?    @relation(fields: [patientId], references: [id], name: "patient")
  medicationId String
  medication   Medication? @relation(fields: [medicationId], references: [id], name: "medication")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt()
}

/// @@allow('all', true)
model MedicationOrder {
  id             String        @id() @default(uuid())
  quantity       Float
  status         String
  medicationId   String
  medication     Medication?   @relation(fields: [medicationId], references: [id], name: "medication")
  organizationId String
  organization   Organization? @relation(fields: [organizationId], references: [id], name: "organization")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt()
}

/// @@allow('all', true)
model HealthLog {
  id        String   @id() @default(uuid())
  type      String
  notes     String?
  date      String
  patientId String
  patient   Patient? @relation(fields: [patientId], references: [id], name: "patient")
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
  patients         Patient[]          @relation("organization")
  medications      Medication[]       @relation("organization")
  medicationOrders MedicationOrder[]  @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}
